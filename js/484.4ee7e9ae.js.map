{"version":3,"file":"js/484.4ee7e9ae.js","mappings":"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","sources":["webpack://my-app/../../../src/js/util/util.js","webpack://my-app/../../../src/js/util/dom-events.js","webpack://my-app/../../../src/js/util/viewport-size.js","webpack://my-app/../../../src/js/slide/pan-bounds.js","webpack://my-app/../../../src/js/slide/zoom-level.js","webpack://my-app/../../../src/js/slide/slide.js","webpack://my-app/../../../src/js/gestures/drag-handler.js","webpack://my-app/../../../src/js/gestures/zoom-handler.js","webpack://my-app/../../../src/js/gestures/tap-handler.js","webpack://my-app/../../../src/js/gestures/gestures.js","webpack://my-app/../../../src/js/main-scroll.js","webpack://my-app/../../../src/js/keyboard.js","webpack://my-app/../../../src/js/util/css-animation.js","webpack://my-app/../../../src/js/util/spring-easer.js","webpack://my-app/../../../src/js/util/spring-animation.js","webpack://my-app/../../../src/js/util/animations.js","webpack://my-app/../../../src/js/scroll-wheel.js","webpack://my-app/../../../src/js/ui/ui-element.js","webpack://my-app/../../../src/js/ui/button-arrow.js","webpack://my-app/../../../src/js/ui/button-close.js","webpack://my-app/../../../src/js/ui/button-zoom.js","webpack://my-app/../../../src/js/ui/loading-indicator.js","webpack://my-app/../../../src/js/ui/counter-indicator.js","webpack://my-app/../../../src/js/ui/ui.js","webpack://my-app/../../../src/js/slide/get-thumb-bounds.js","webpack://my-app/../../../src/js/core/eventable.js","webpack://my-app/../../../src/js/slide/placeholder.js","webpack://my-app/../../../src/js/slide/content.js","webpack://my-app/../../../src/js/slide/loader.js","webpack://my-app/../../../src/js/core/base.js","webpack://my-app/../../../src/js/opener.js","webpack://my-app/../../../src/js/photoswipe.js"],"sourcesContent":["/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {undefined | null | false | '' | 0} Falsy */\r\n/** @typedef {keyof HTMLElementTagNameMap} HTMLElementTagName */\r\n\r\n/**\r\n * @template {HTMLElementTagName | Falsy} [T=\"div\"]\r\n * @template {Node | undefined} [NodeToAppendElementTo=undefined]\r\n * @param {string=} className\r\n * @param {T=} [tagName]\r\n * @param {NodeToAppendElementTo=} appendToEl\r\n * @returns {T extends HTMLElementTagName ? HTMLElementTagNameMap[T] : HTMLElementTagNameMap['div']}\r\n */\r\nexport function createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName || 'div');\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  // @ts-expect-error\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nexport function equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nexport function roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nexport function getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are qual\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nexport function pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n */\r\nexport function clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nexport function toTransformString(x, y, scale) {\r\n  let propValue = 'translate3d('\r\n    + x + 'px,' + (y || 0) + 'px'\r\n    + ',0)';\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ' scale3d('\r\n      + scale + ',' + scale\r\n      + ',1)';\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nexport function setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string=} prop CSS property to animate\r\n * @param {number=} duration in ms\r\n * @param {string=} ease CSS easing function\r\n */\r\nexport function setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? (prop + ' ' + duration + 'ms ' + (ease || defaultCSSEasing))\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nexport function setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? (w + 'px') : w;\r\n  el.style.height = (typeof h === 'number') ? (h + 'px') : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nexport function removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nexport function decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode();\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nexport const LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n */\r\nexport function specialKeyUsed(e) {\r\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {HTMLElement | NodeListOf<HTMLElement> | string} option\r\n * @param {string=} legacySelector\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nexport function getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n */\r\nexport function isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nexport function isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\r\n\r\n","// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\n\r\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document} target\r\n * @prop {string} type\r\n * @prop {(e: any) => void} listener\r\n * @prop {boolean} passive\r\n */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type Can be multiple, separated by space.\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean} passive\r\n   * @param {boolean=} unbind Whether the event should be added or removed\r\n   * @param {boolean=} skipPool Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\r\n    const types = type.split(' ');\r\n    types.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default DOMEvents;\r\n","/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipe} pswp\r\n */\r\nexport function getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {{ x?: number; y?: number }} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nexport function parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  /** @type {number} */\r\n  let paddingValue;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return paddingValue || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {{ x?: number; y?: number }} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n */\r\nexport function getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n","import {\r\n  clamp\r\n} from '../util/util.js';\r\nimport { parsePaddingOption } from '../util/viewport-size.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n/** @typedef {'x' | 'y'} Axis */\r\n\r\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nclass PanBounds {\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n\r\n    this.currZoomLevel = 1;\r\n\r\n    /** @type {Point} */\r\n    this.center = {};\r\n    /** @type {Point} */\r\n    this.max = {};\r\n    /** @type {Point} */\r\n    this.min = {};\r\n\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By defaul it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\r\n\r\nexport default PanBounds;\r\n","const MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe=} pswp PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {{ x?: number; y?: number }} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    this.elementSize = {\r\n      x: maxWidth,\r\n      y: maxHeight\r\n    };\r\n\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\r\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    // eslint-disable-next-line max-len\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (optionPrefix + 'ZoomLevel');\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    const currZoomLevel = this._parseZoomLevelOption('max');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\nexport default ZoomLevel;\r\n","/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @typedef {_SlideData & Record<string, any>} SlideData\r\n * @typedef {Object} _SlideData\r\n * @prop {HTMLElement=} element thumbnail element\r\n * @prop {string=} src image URL\r\n * @prop {string=} srcset image srcset\r\n * @prop {number=} w image width (deprecated)\r\n * @prop {number=} h image height (deprecated)\r\n * @prop {number=} width image width\r\n * @prop {number=} height image height\r\n * @prop {string=} msrc placeholder image URL that's displayed before large image is loaded\r\n * @prop {string=} alt image alt text\r\n * @prop {boolean=} thumbCropped whether thumbnail is cropped client-side or not\r\n * @prop {string=} html html content of a slide\r\n * @prop {'image' | 'html' | string} [type] slide type\r\n */\r\n\r\nimport {\r\n  createElement,\r\n  setTransform,\r\n  equalizePoints,\r\n  roundPoint,\r\n  toTransformString,\r\n  clamp,\r\n} from '../util/util.js';\r\n\r\nimport PanBounds from './pan-bounds.js';\r\nimport ZoomLevel from './zoom-level.js';\r\nimport { getPanAreaSize } from '../util/viewport-size.js';\r\n\r\n/**\r\n * Renders and allows to control a single slide\r\n */\r\nclass Slide {\r\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    /** @type {Point} */\r\n    this.panAreaSize = {};\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.pan = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap');\r\n\r\n    this.currZoomLevel = 1;\r\n    /** @type {number} */\r\n    this.width = this.content.width;\r\n    /** @type {number} */\r\n    this.height = this.content.height;\r\n\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    this.container.style.transformOrigin = '0 0';\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.load();\r\n    this.updateContentSize();\r\n    this.appendHeavy();\r\n\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load();\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\r\n      // allow filtering\r\n      this.calculateSize();\r\n    }\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.container.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean=} force if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  getPlaceholderElement() {\r\n    if (this.content.placeholder) {\r\n      return this.content.placeholder.element;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {{ x?: number; y?: number }} centerPoint\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean=} ignoreBounds Minimum and maximum zoom levels will be ignored.\r\n   * @return {boolean=} Returns true if animated.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {{ x?: number, y?: number }} [centerPoint]\r\n   */\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {{ x?: number; y?: number }} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number=} prevZoomLevel Zoom level before new zoom was applied.\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   */\r\n  isPannable() {\r\n    return this.width && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.width && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\r\n\r\nexport default Slide;\r\n","import {\r\n  equalizePoints, roundPoint, clamp\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n */\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\n/**\r\n * Handles single pointer dragging\r\n */\r\nclass DragHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    /** @type {Point} */\r\n    this.startPan = {};\r\n  }\r\n\r\n  start() {\r\n    equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && pswp.options.closeOnVerticalDrag\r\n        && currSlide.currZoomLevel <= currSlide.zoomLevels.fit\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        roundPoint(currSlide.pan);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { pswp, velocity } = this.gestures;\r\n    const { mainScroll } = pswp;\r\n    let indexDiff = 0;\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is vicible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if (pswp.currSlide.currZoomLevel > pswp.currSlide.zoomLevels.max\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _finishPanGestureForAxis(axis) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    const { velocity } = this.gestures;\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Inceasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, pswp, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta) {\r\n      return;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n  }\r\n  //\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - this.pswp.currSlide.bounds.center.y)\r\n            / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number=} customFriction (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { pan, bounds } = this.pswp.currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\r\n\r\nexport default DragHandler;\r\n","import {\r\n  equalizePoints, getDistanceBetween, clamp, pointsEqual\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = this.gestures.pswp;\r\n    /** @type {Point} */\r\n    this._startPan = {};\r\n\r\n    /** @type {Point} */\r\n    this._startZoomPoint = {};\r\n    /** @type {Point} */\r\n    this._zoomPoint = {};\r\n  }\r\n\r\n  start() {\r\n    this._startZoomLevel = this.pswp.currSlide.currZoomLevel;\r\n    equalizePoints(this._startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    if (currSlide.currZoomLevel < currSlide.zoomLevels.initial\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   */\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean=} ignoreGesture\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === undefined) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    /** @type {number} */\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({}, currSlide.pan);\r\n    let destinationPan = equalizePoints({}, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    let panNeedsChange = true;\r\n    if (pointsEqual(destinationPan, initialPan)) {\r\n      panNeedsChange = false;\r\n    }\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default ZoomHandler;\r\n","/**\r\n * @template T\r\n * @template P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\r\n\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(/** @type {HTMLElement} */ (event.target).closest('.pswp__container'));\r\n}\r\n\r\n/**\r\n * Tap, double-tap handler.\r\n */\r\nclass TapHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  click(point, originalEvent) {\r\n    const targetClassList = /** @type {HTMLElement} */ (originalEvent.target).classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ (actionName + 'Action');\r\n    const optionValue = pswp.options[actionFullName];\r\n\r\n    if (pswp.dispatch(actionFullName, { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TapHandler;\r\n","import {\r\n  equalizePoints, pointsEqual, getDistanceBetween\r\n} from '../util/util.js';\r\n\r\nimport DragHandler from './drag-handler.js';\r\nimport ZoomHandler from './zoom-handler.js';\r\nimport TapHandler from './tap-handler.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nclass Gestures {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {'x' | 'y'} */\r\n    this.dragAxis = undefined;\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    /** @type {Point} */\r\n    this.p1 = {}; // the first pressed pointer\r\n    /** @type {Point} */\r\n    this.p2 = {}; // the second pressed pointer\r\n    /** @type {Point} */\r\n    this.prevP1 = {};\r\n    /** @type {Point} */\r\n    this.prevP2 = {};\r\n    /** @type {Point} */\r\n    this.startP1 = {};\r\n    /** @type {Point} */\r\n    this.startP2 = {};\r\n    /** @type {Point} */\r\n    this.velocity = {};\r\n\r\n    /** @type {Point} */\r\n    this._lastStartP1 = {};\r\n    /** @type {Point} */\r\n    this._intervalP1 = {};\r\n    this._numActivePoints = 0;\r\n    /** @type {Point[]} */\r\n    this._ongoingPointers = [];\r\n\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(pswp.scrollWrap, 'click', e => this._onClick(e));\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        pswp.scrollWrap.ontouchmove = () => {}; // eslint-disable-line\r\n        pswp.scrollWrap.ontouchend = () => {}; // eslint-disable-line\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(pswp.scrollWrap, pref + down, this.onPointerDown.bind(this));\r\n    events.add(window, pref + 'move', this.onPointerMove.bind(this));\r\n    events.add(window, pref + up, this.onPointerUp.bind(this));\r\n    if (cancelEvent) {\r\n      events.add(pswp.scrollWrap, cancelEvent, this.onPointerUp.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    let isMousePointer;\r\n    if (e.type === 'mousedown' || e.pointerType === 'mouse') {\r\n      isMousePointer = true;\r\n    }\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e);\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    this.pointerDown = true;\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerMove(e) {\r\n    e.preventDefault(); // always preventDefault move event\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this.pointerDown = false;\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @param {boolean=} force\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _preventPointerEventBehaviour(e) {\r\n    // TODO find a way to disable e.preventDefault on some elements\r\n    //      via event or some class or something\r\n    e.preventDefault();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      const pointerEvent = /** @type {PointerEvent} */ (e);\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPoiner) => {\r\n        return ongoingPoiner.id === pointerEvent.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, {}));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      const touchEvent = /** @type {TouchEvent} */ (e);\r\n\r\n      this._numActivePoints = 0;\r\n      if (touchEvent.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\r\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (touchEvent.touches.length > 1) {\r\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(/** @type {PointerEvent} */ (e), this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // update points that were used during previous rAF tick\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  // update points at the start of gesture\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    if ('pointerId' in e) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Gestures;\r\n","import {\r\n  setTransform,\r\n  createElement,\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/slide.js').default} Slide */\r\n\r\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n\r\n    /** @type {number} */\r\n    this.slideWidth = undefined;\r\n\r\n    /** @type {ItemHolder[]} */\r\n    this.itemHolders = undefined;\r\n\r\n    this.resetPosition();\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean=} resizeSlides Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', false, this.pswp.container);\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean=} animate\r\n   * @param {number=} velocityX\r\n   * @returns {boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    if (diff) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n        this._containerShiftIndex++;\r\n\r\n        setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n        this._containerShiftIndex--;\r\n\r\n        setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1].slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    pswp.currSlide.applyCurrentZoomPan();\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean=} dragging\r\n   */\r\n  moveTo(x, dragging) {\r\n    /** @type {number} */\r\n    let newSlideIndexOffset;\r\n    /** @type {number} */\r\n    let delta;\r\n\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n    setTransform(this.pswp.container, x);\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging });\r\n  }\r\n}\r\n\r\nexport default MainScroll;\r\n","import { specialKeyUsed } from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Heps trap focus within photoswipe.\r\n */\r\nclass Keyboard {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      // Dialog was likely opened by keyboard if initial point is not defined\r\n      if (!pswp.options.initialPointerPos) {\r\n        // focus causes layout,\r\n        // which causes lag during the animation,\r\n        // that's why we delay it until the opener transition ends\r\n        this._focusRoot();\r\n      }\r\n\r\n      pswp.events.add(document, 'focusin', this._onFocusIn.bind(this));\r\n      pswp.events.add(document, 'keydown', this._onKeyDown.bind(this));\r\n    });\r\n\r\n    const lastActiveElement = /** @type {HTMLElement} */ (document.activeElement);\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  _focusRoot() {\r\n    if (!this._wasFocused) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    /** @type {Methods<PhotoSwipe>} */\r\n    let keydownAction;\r\n    /** @type {'x' | 'y'} */\r\n    let axis;\r\n    let isForward;\r\n\r\n    switch (e.keyCode) {\r\n      case 27: // esc\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case 90: // z key\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case 37: // left\r\n        axis = 'x';\r\n        break;\r\n      case 38: // top\r\n        axis = 'y';\r\n        break;\r\n      case 39: // right\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case 40: // bottom\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case 9: // tab\r\n        this._focusRoot();\r\n        break;\r\n      default:\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @param {FocusEvent} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(/** @type {Node} */ (e.target))) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Keyboard;\r\n","import { setTransitionStyle, removeTransitionStyle } from './util.js';\r\n\r\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\r\n\r\n/**\r\n * Runs CSS transition.\r\n */\r\nclass CSSAnimation {\r\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      onFinish\r\n      // opacity\r\n    } = props;\r\n\r\n    let {\r\n      duration,\r\n      easing,\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop];\r\n\r\n    /** @private */\r\n    this._target = target;\r\n    /** @private */\r\n    this._onComplete = onComplete;\r\n\r\n    duration = duration || 333;\r\n    easing = easing || DEFAULT_EASING;\r\n\r\n    /** @private */\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transiton won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    /** @private */\r\n    this._helperTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._helperTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n\r\n        // Safari occasionally does not emit transitionend event\r\n        // if element propery was modified during the transition,\r\n        // which may be caused by resize or third party component,\r\n        // using timeout as a safety fallback\r\n        this._helperTimeout = setTimeout(() => {\r\n          this._finalizeAnimation();\r\n        }, duration + 500);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._helperTimeout) {\r\n      clearTimeout(this._helperTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default CSSAnimation;\r\n","const DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\n/**\r\n * Spring easing helper\r\n */\r\nclass SpringEaser {\r\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} dampingRatio\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} naturalFrequency\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency = this._naturalFrequency\r\n                         * Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\r\n\r\nexport default SpringEaser;\r\n","import SpringEaser from './spring-easer.js';\r\n\r\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\r\n\r\nclass SpringAnimation {\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish,\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = null;\r\n  }\r\n}\r\n\r\nexport default SpringAnimation;\r\n","import CSSAnimation from './css-animation.js';\r\nimport SpringAnimation from './spring-animation.js';\r\n\r\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\r\n\r\n/**\r\n * @typedef {Object} AnimationProps\r\n *\r\n * @prop {HTMLElement=} target\r\n *\r\n * @prop {string=} name\r\n *\r\n * @prop {number=} start\r\n * @prop {number=} end\r\n * @prop {number=} duration\r\n * @prop {number=} velocity\r\n * @prop {number=} dampingRatio\r\n * @prop {number=} naturalFrequency\r\n *\r\n * @prop {(end: number) => void} [onUpdate]\r\n * @prop {() => void} [onComplete]\r\n * @prop {() => void} [onFinish]\r\n *\r\n * @prop {string=} transform\r\n * @prop {string=} opacity\r\n * @prop {string=} easing\r\n *\r\n * @prop {boolean=} isPan\r\n * @prop {boolean=} isMainScroll\r\n */\r\n\r\n/**\r\n * Manages animations\r\n */\r\nclass Animations {\r\n  constructor() {\r\n    /** @type {Animation[]} */\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   * @param {boolean=} isSpring\r\n   */\r\n  _start(props, isSpring) {\r\n    /** @type {Animation} */\r\n    let animation;\r\n    if (isSpring) {\r\n      animation = new SpringAnimation(props);\r\n    } else {\r\n      animation = new CSSAnimation(props);\r\n    }\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  /**\r\n   * @param {Animation} animation\r\n   */\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\r\n\r\nexport default Animations;\r\n","/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', this._onWheel.bind(this));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScrollWheel;\r\n","import { createElement } from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean=} isCustomSVG\r\n * @prop {string} inner\r\n * @prop {string=} outlineID\r\n * @prop {number | string} [size]\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string=} className\r\n * @prop {UIElementMarkup=} html\r\n * @prop {boolean=} isButton\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string=} title\r\n * @prop {string=} ariaLabel\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number=} order\r\n */\r\n\r\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\r\n\r\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\r\n\r\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n */\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  // replace all %d with size\r\n  out = out.split('%d').join(/** @type {string} */ (svgData.size || 32));\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    /** @type {HTMLElement} */\r\n    let element;\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = /** @type {keyof HTMLElementTagNameMap} */ (tagName.toLowerCase());\r\n    element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      // create button element\r\n      element = createElement(className, tagName);\r\n      if (tagName === 'button') {\r\n        /** @type {HTMLButtonElement} */ (element).type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        // @ts-expect-error lookup only by `data.name` maybe?\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      if (ariaLabel || title) {\r\n        /** @type {HTMLElement} */ (element).setAttribute('aria-label', ariaLabel || title);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          pswp[data.onClick]();\r\n        } else {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    let container;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      } else {\r\n        // root element\r\n        container = pswp.element;\r\n      }\r\n    }\r\n\r\n    container.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\r\n\r\nexport default UIElement;\r\n","/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean=} isNextButton\r\n */\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\r\n\r\nexport default closeButton;\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\r\n\r\nexport default zoomButton;\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    /** @type {boolean} */\r\n    let isVisible;\r\n    /** @type {NodeJS.Timeout} */\r\n    let delayTimeout;\r\n\r\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList[add ? 'add' : 'remove']('pswp__preloader--' + className);\r\n    };\r\n\r\n    /**\r\n     * @param {boolean} visible\r\n     */\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(pswp.currSlide.content.isLoading());\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n  }\r\n};\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\r\n","import UIElement from './ui-element.js';\r\nimport { arrowPrev, arrowNext } from './button-arrow.js';\r\nimport closeButton from './button-close.js';\r\nimport zoomButton from './button-zoom.js';\r\nimport { loadingIndicator } from './loading-indicator.js';\r\nimport { counterIndicator } from './counter-indicator.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList[isZoomedIn ? 'add' : 'remove']('pswp--zoomed-in');\r\n}\r\n\r\nclass UI {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {() => void} */\r\n    this.updatePreloaderVisibility = undefined;\r\n\r\n    /** @type {number} */\r\n    this._lastUpdatedZoomLevel = undefined;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    /** @type {UIElementData[]} */\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    /** @type {(UIElement | UIElementData)[]} */\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element.classList[pswp.getNumItems() === 1 ? 'add' : 'remove']('pswp--one-slide');\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    if (this.pswp.opener.isClosing) {\r\n      return;\r\n    }\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n\r\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial\r\n      ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\r\n\r\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\r\n\r\nexport default UI;\r\n","/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nfunction getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n */\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\r\nexport function getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  // @ts-expect-error\r\n  if (event.thumbBounds) {\r\n    // @ts-expect-error\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  let thumbBounds;\r\n  /** @type {HTMLElement} */\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : element.querySelector(thumbSelector);\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.width || itemData.w,\r\n        itemData.height || itemData.h\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\r\n","/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point, transitionDuration: number | false }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter<T>\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback<T>\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe=} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name].push({ fn, priority });\r\n    this._filters[name].sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    if (this.pswp) {\r\n      this.pswp.addFilter(name, fn, priority);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    if (this._filters[name]) {\r\n      this._filters[name].forEach((filter) => {\r\n        // @ts-expect-error\r\n        args[0] = filter.fn.apply(this, args);\r\n      });\r\n    }\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name].push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    if (this.pswp) {\r\n      this.pswp.on(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.off(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    if (!this._listeners) {\r\n      return event;\r\n    }\r\n\r\n    if (this._listeners[name]) {\r\n      this._listeners[name].forEach((listener) => {\r\n        listener.call(this, event);\r\n      });\r\n    }\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nexport default Eventable;\r\n","import { createElement, setWidthHeight, toTransformString } from '../util/util.js';\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : '',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).decoding = 'async';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).alt = '';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).src = imageSrc;\r\n      this.element.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hiden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\nexport default Placeholder;\r\n","import { createElement, isSafari, LOAD_STATE, setWidthHeight } from '../util/util.js';\r\nimport Placeholder from './placeholder.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipe} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement} */\r\n    this.element = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = null;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean=} isLazy\r\n   * @param {boolean=} reload\r\n   */\r\n  load(isLazy, reload) {\r\n    if (!this.placeholder && this.slide && this.usePlaceholder()) {\r\n      // use   -based placeholder only for the first slide,\r\n      // as rendering (even small stretched thumbnail) is an expensive operation\r\n      const placeholderSrc = this.instance.applyFilters(\r\n        'placeholderSrc',\r\n        (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n        this\r\n      );\r\n      this.placeholder = new Placeholder(\r\n        placeholderSrc,\r\n        this.slide.container\r\n      );\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    if (this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src;\r\n\r\n    imageElement.alt = this.data.alt || '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    // eslint-disable-next-line max-len\r\n    if (this.instance.dispatch('contentResize', { content: this, width, height }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        // eslint-disable-next-line max-len\r\n        this.instance.dispatch('imageSizeChange', { slide: this.slide, width, height, content: this });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (this.data.srcset) {\r\n      const image = /** @type HTMLImageElement */ (this.element);\r\n      const sizesWidth = this.instance.applyFilters(\r\n        'srcsetSizesWidth',\r\n        this.displayedImageWidth,\r\n        this\r\n      );\r\n\r\n      if (!image.dataset.largestUsedSize\r\n          || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)) {\r\n        image.sizes = sizesWidth + 'px';\r\n        image.dataset.largestUsedSize = String(sizesWidth);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = null;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      /** @type {HTMLElement} */\r\n      let errorMsgEl = createElement('pswp__error-msg');\r\n      errorMsgEl.innerText = this.instance.options.errorMsg;\r\n      errorMsgEl = this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      );\r\n      this.element = createElement('pswp__content pswp__error-msg-container');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.slide) {\r\n      if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n        // add image to slide when it becomes active,\r\n        // even if it's not finished decoding\r\n        this.appendImage();\r\n      } else if (this.isError()) {\r\n        this.load(false, true); // try to reload\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","import { getViewportSize, getPanAreaSize } from '../util/viewport-size.js';\r\nimport ZoomLevel from './zoom-level.js';\r\n\r\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipe | PhotoSwipeLightbox | PhotoSwipeBase} instance PhotoSwipe instance\r\n * @param {number} index\r\n * @returns Image that is being decoded or false.\r\n */\r\nexport function lazyLoadData(itemData, instance, index) {\r\n  // src/slide/content/content.js\r\n  const content = instance.createContentFromData(itemData, index);\r\n\r\n  if (!content || !content.lazyLoad) {\r\n    return;\r\n  }\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset and we need to define sizes\r\n  // @ts-expect-error should provide pswp instance?\r\n  const viewportSize = instance.viewportSize || getViewportSize(options, instance);\r\n  const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n\r\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\r\n  zoomLevel.update(content.width, content.height, panAreaSize);\r\n\r\n  content.lazyLoad();\r\n  content.setDisplayedSize(\r\n    Math.ceil(content.width * zoomLevel.initial),\r\n    Math.ceil(content.height * zoomLevel.initial)\r\n  );\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n */\r\nexport function lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number=} diff Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  loadSlideByIndex(index) {\r\n    index = this.pswp.getLoopedIndex(index);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n\r\n    if (content) {\r\n      // assign slide to content\r\n      content.setSlide(slide);\r\n    }\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = null;\r\n  }\r\n}\r\n\r\nexport default ContentLoader;\r\n","import Eventable from './eventable.js';\r\nimport {\r\n  getElementsFromOption\r\n} from '../util/util.js';\r\nimport Content from '../slide/content.js';\r\nimport { lazyLoadData } from '../slide/loader.js';\r\n\r\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../photoswipe.js\").PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems;\r\n    const { dataSource } = this.options;\r\n    if (!dataSource) {\r\n      numItems = 0;\r\n    } else if ('length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if ('gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    // @ts-expect-error\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getItemData(index) {\r\n    const { dataSource } = this.options;\r\n    let dataSourceItem;\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && dataSource.gallery) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options.children || this.options.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    // eslint-disable-next-line max-len\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (element.tagName === 'A' ? element : element.querySelector('a'));\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = parseInt(linkEl.dataset.pswpWidth, 10);\r\n      itemData.height = parseInt(linkEl.dataset.pswpHeight, 10);\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt');\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeBase;\r\n","import {\r\n  setTransform,\r\n  equalizePoints,\r\n  decodeImage,\r\n  toTransformString\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\r\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\nclass Opener {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    /** @type {false | Bounds} */\r\n    this._thumbBounds = undefined;\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return false;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n\r\n    return true;\r\n  }\r\n\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = false;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = false;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = (this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && (slide.content && slide.content.usePlaceholder())\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide.holderElement;\r\n\r\n      pswp.container.style.overflow = 'hidden';\r\n      pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity) {\r\n          pswp.bg.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.element.style.opacity = '1';\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.style.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = String(MIN_OPACITY);\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(/** @type {HTMLImageElement} */ (this._placeholder)).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve();\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve();\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  _initiate() {\r\n    this.pswp.element.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch(\r\n      /** @type {'initialZoomIn' | 'initialZoomOut'} */\r\n      ('initialZoom' + (this.isOpening ? 'In' : 'Out'))\r\n    );\r\n\r\n    this.pswp.element.classList[this.isOpening ? 'add' : 'remove']('pswp--ui-visible');\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = '1';\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch(\r\n      /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\r\n      ('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'))\r\n    );\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      pswp.currSlide.zoomAndPanToInitial();\r\n      this._animateTo(\r\n        pswp.currSlide.container,\r\n        'transform',\r\n        pswp.currSlide.getCurrentTransform()\r\n      );\r\n    }\r\n\r\n    if (this._animateBgOpacity) {\r\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '1');\r\n    }\r\n  }\r\n\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    if (this._animateBgOpacity\r\n        && pswp.bgOpacity > 0.01) { // do not animate opacity if it's already at 0\r\n      this._animateTo(pswp.bg, 'opacity', '0');\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {boolean=} animate\r\n   */\r\n  _setClosedStateZoomPan(animate) {\r\n    if (!this._thumbBounds) return;\r\n\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n    currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n\r\n    if (animate) {\r\n      this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n    } else {\r\n      currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    /** @type {AnimationProps} */\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\r\n\r\nexport default Opener;\r\n","import {\r\n  createElement,\r\n  equalizePoints,\r\n  pointsEqual,\r\n  clamp,\r\n} from './util/util.js';\r\n\r\nimport DOMEvents from './util/dom-events.js';\r\nimport Slide from './slide/slide.js';\r\nimport Gestures from './gestures/gestures.js';\r\nimport MainScroll from './main-scroll.js';\r\n\r\nimport Keyboard from './keyboard.js';\r\nimport Animations from './util/animations.js';\r\nimport ScrollWheel from './scroll-wheel.js';\r\nimport UI from './ui/ui.js';\r\nimport { getViewportSize } from './util/viewport-size.js';\r\nimport { getThumbBounds } from './slide/get-thumb-bounds.js';\r\nimport PhotoSwipeBase from './core/base.js';\r\nimport Opener from './opener.js';\r\nimport ContentLoader from './slide/loader.js';\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\r\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\r\n\r\n/** @typedef {{ x?: number; y?: number; id?: string | number }} Point */\r\n/** @typedef {{ x?: number; y?: number }} Size */\r\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\r\n/** @typedef {SlideData[]} DataSourceArray */\r\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\r\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\r\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\r\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\r\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\r\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeOptions https://photoswipe.com/options/\r\n *\r\n * @prop {DataSource=} dataSource\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number=} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number=} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean=} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean=} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean=} wheelToZoom\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean=} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean=} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding=} padding\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Size, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} [hideAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [showAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [zoomAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string=} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean=} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean=} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean=} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean=} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} [imageClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [bgClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [tapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [doubleTapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number=} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string=} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipe) => { x: number; y: number }} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string=} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]=} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string=} mainClass\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement=} appendToEl\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number=} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string=} closeTitle\r\n * Translating\r\n *\r\n * @prop {string=} zoomTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowNextTitle\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number=} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean=} arrowPrev\r\n * @prop {boolean=} arrowNext\r\n * @prop {boolean=} zoom\r\n * @prop {boolean=} close\r\n * @prop {boolean=} counter\r\n *\r\n * @prop {string=} arrowPrevSVG\r\n * @prop {string=} arrowNextSVG\r\n * @prop {string=} zoomSVG\r\n * @prop {string=} closeSVG\r\n * @prop {string=} counterSVG\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * @prop {string=} arrowNextTitle\r\n * @prop {string=} zoomTitle\r\n * @prop {string=} closeTitle\r\n * @prop {string=} counterTitle\r\n *\r\n * @prop {ZoomLevelOption=} initialZoomLevel\r\n * @prop {ZoomLevelOption=} secondaryZoomLevel\r\n * @prop {ZoomLevelOption=} maxZoomLevel\r\n *\r\n * @prop {boolean=} mouseMovePan\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean=} showHideOpacity\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean=} preloadFirstSlide\r\n * @prop {string=} gallery\r\n * @prop {string=} gallerySelector\r\n * @prop {string=} children\r\n * @prop {string=} childSelector\r\n * @prop {string | false} [thumbSelector]\r\n */\r\n\r\n/** @type {PhotoSwipeOptions} */\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\n/**\r\n * PhotoSwipe Core\r\n */\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    this._prepareOptions(options);\r\n\r\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.offset = {};\r\n\r\n    /**\r\n     * @type {{ x?: number; y?: number }}\r\n     * @private\r\n     */\r\n    this._prevViewportSize = {};\r\n\r\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.viewportSize = {};\r\n\r\n    /**\r\n     * background (backdrop) opacity\r\n     *\r\n     * @type {number}\r\n     */\r\n    this.bgOpacity = 1;\r\n\r\n    /** @type {HTMLDivElement} */\r\n    this.topBar = undefined;\r\n\r\n    this.events = new DOMEvents();\r\n\r\n    /** @type {Animations} */\r\n    this.animations = new Animations();\r\n\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    this.element.className += ' ' + rootClasses;\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', {\r\n      index: this.currIndex,\r\n      data: this._initialItemData,\r\n      slide: undefined\r\n    });\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      this.mainScroll.itemHolders[0].el.style.display = 'block';\r\n      this.mainScroll.itemHolders[2].el.style.display = 'block';\r\n\r\n      // Add content to the previous and next slide\r\n      this.setContent(this.mainScroll.itemHolders[0], this.currIndex - 1);\r\n      this.setContent(this.mainScroll.itemHolders[2], this.currIndex + 1);\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    index = clamp(index, 0, numSlides - 1);\r\n\r\n    return index;\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.appendHeavy();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this.listeners = null;\r\n\r\n    this.scrollWrap.ontouchmove = null;\r\n    this.scrollWrap.ontouchend = null;\r\n\r\n    this.element.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.destroy();\r\n      }\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = this.currSlide.index - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          /** @type {Slide} */\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean=} force If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = null;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean=} force Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  /**\r\n   * @param {number} opacity\r\n   */\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp');\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', false, this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', false, this.element);\r\n    this.container = createElement('pswp__container', false, this.scrollWrap);\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continious loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   * @private\r\n   */\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    /** @type {PhotoSwipeOptions}*/\r\n    this.options = {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\r\n\r\nexport default PhotoSwipe;\r\n"],"names":["createElement","className","tagName","appendToEl","el","document","appendChild","equalizePoints","p1","p2","x","y","undefined","id","roundPoint","p","Math","round","getDistanceBetween","abs","sqrt","pointsEqual","clamp","val","min","max","toTransformString","scale","propValue","setTransform","style","transform","defaultCSSEasing","setTransitionStyle","prop","duration","ease","transition","setWidthHeight","w","h","width","height","removeTransitionStyle","decodeImage","img","decode","complete","Promise","resolve","reject","onload","onerror","LOAD_STATE","IDLE","LOADING","LOADED","ERROR","specialKeyUsed","e","which","ctrlKey","metaKey","altKey","shiftKey","getElementsFromOption","option","legacySelector","parent","elements","Element","NodeList","Array","isArray","from","selector","querySelectorAll","isSafari","navigator","vendor","match","supportsPassive","window","addEventListener","Object","defineProperty","get","DOMEvents","constructor","this","_pool","add","target","type","listener","passive","_toggleListener","remove","removeAll","forEach","poolItem","unbind","skipPool","methodName","types","split","eType","filter","push","eventOptions","getViewportSize","options","pswp","getViewportSizeFn","newViewportSize","documentElement","clientWidth","innerHeight","parsePaddingOption","viewportSize","itemData","index","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","getPanAreaSize","PanBounds","slide","currZoomLevel","center","reset","update","_updateAxis","dispatch","axis","elSize","paddingProp","data","panAreaSize","correctPan","panOffset","MAX_IMAGE_WIDTH","ZoomLevel","maxWidth","maxHeight","elementSize","hRatio","vRatio","fit","fill","vFill","initial","_getInitial","secondary","_getSecondary","_getMax","zoomLevels","slideData","_parseZoomLevelOption","optionPrefix","optionName","optionValue","Number","Slide","isActive","currIndex","currentResolution","isFirstSlide","opener","isOpen","pan","content","contentLoader","getContentBySlide","container","bounds","prevDisplayedWidth","prevDisplayedHeight","setIsActive","activate","deactivate","append","holderElement","transformOrigin","calculateSize","load","updateContentSize","appendHeavy","zoomAndPanToInitial","applyCurrentZoomPan","appendHeavyNearby","heavyAppended","mainScroll","isShifted","defaultPrevented","destroy","hasSlide","resize","panTo","force","scaleMultiplier","sizeChanged","setDisplayedSize","getPlaceholderElement","placeholder","element","zoomTo","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","isZoomable","animations","stopAllPan","prevZoomLevel","setZoomLevel","calculateZoomToPanOffset","finishTransition","_setResolution","startTransition","isPan","name","getCurrentTransform","onComplete","easing","toggleZoom","zoomAnimationDuration","point","totalPanDistance","getViewportCenterPoint","zoomFactor","panX","panY","isPannable","_applyZoomTransform","currSlide","zoom","newResolution","PAN_END_FRICTION","VERTICAL_DRAG_FRICTION","MIN_RATIO_TO_CLOSE","MIN_NEXT_SLIDE_SPEED","project","initialVelocity","decelerationRate","DragHandler","gestures","startPan","start","stopAll","change","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","mainScrollChanged","_panOrMoveMainScroll","end","velocity","indexDiff","mainScrollShiftDiff","getCurrSlideX","currentSlideVisibilityRatio","moveIndexBy","correctZoomPan","_finishPanGestureForAxis","panPos","restoreBgOpacity","projectedPosition","vDragRatio","projectedVDragRatio","close","correctedPanPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","onUpdate","pos","animationProgressRatio","floor","delta","newMainScrollX","moveTo","newPan","allowPanToNext","currSlideMainScrollX","isLeftToRight","isRightToLeft","wasAtMinPanPosition","wasAtMaxPanPosition","potentialPan","customFriction","correctedPan","UPPER_ZOOM_FRICTION","LOWER_ZOOM_FRICTION","getZoomPointsCenter","ZoomHandler","_startPan","_startZoomPoint","_zoomPoint","_startZoomLevel","_wasOverFitZoomLevel","startP1","startP2","minZoomLevel","maxZoomLevel","pinchToClose","_calculatePanForZoomLevel","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","initialPan","destinationPan","panNeedsChange","naturalFrequency","now","newZoomLevel","didTapOnMainContent","event","closest","TapHandler","click","originalEvent","targetClassList","classList","isImageClick","contains","isBackgroundClick","_doClickOrTapAction","tap","doubleTap","actionName","actionFullName","clickToCloseNonZoomable","toggle","call","AXIS_SWIPE_HYSTERISIS","DOUBLE_TAP_DELAY","MIN_TAP_DISTANCE","Gestures","prevP2","_lastStartP1","_intervalP1","_numActivePoints","_ongoingPointers","_touchEventEnabled","_pointerEventEnabled","PointerEvent","supportsTouch","maxTouchPoints","drag","tapHandler","on","events","scrollWrap","_onClick","_bindEvents","ontouchmove","ontouchend","pref","down","up","cancel","cancelEvent","onPointerDown","bind","onPointerMove","onPointerUp","isMousePointer","pointerType","button","mouseDetected","_preventPointerEventBehaviour","_updatePoints","pointerDown","_clearTapTimer","preventDefault","isDragging","isZooming","_finishDrag","_updateStartPoints","_rafStopLoop","_rafRenderLoop","_calculateDragDirection","_intervalTime","Date","_velocityCalculated","_updateVelocity","_finishTap","_updatePrevPoints","raf","requestAnimationFrame","time","_getVelocity","indexOf","tapDelay","doubleTapAction","_tapTimer","setTimeout","clearTimeout","displacement","cancelAnimationFrame","pointerEvent","pointerIndex","findIndex","ongoingPoiner","pointerId","splice","_convertEventPosToPoint","length","touchEvent","touches","diff","axisToCheck","pageX","offset","pageY","identifier","stopPropagation","MAIN_SCROLL_END_FRICTION","MainScroll","slideWidth","itemHolders","resetPosition","resizeSlides","newSlideWidth","spacing","slideWidthChanged","itemHolder","_containerShiftIndex","_currPositionIndex","_prevPositionIndex","appendHolders","i","display","canBeSwiped","getNumItems","animate","velocityX","newIndex","potentialIndex","numSlides","canLoop","getLoopedIndex","distance","stopMainScroll","destinationX","isMainScroll","updateCurrItem","currDiff","currDistance","positionDifference","tempHolder","diffAbs","shift","setContent","pop","unshift","updateLazy","dragging","newSlideIndexOffset","Keyboard","initialPointerPos","_focusRoot","_onFocusIn","_onKeyDown","lastActiveElement","activeElement","returnFocus","_wasFocused","focus","keydownAction","isForward","keyCode","escKey","arrowKeys","template","DEFAULT_EASING","CSSAnimation","props","onFinish","_target","_onComplete","_onTransitionEnd","_helperTimeout","_finalizeAnimation","_finished","removeEventListener","DEFAULT_NATURAL_FREQUENCY","DEFAULT_DAMPING_RATIO","SpringEaser","_dampingRatio","_naturalFrequency","_dampedFrequency","easeFrame","deltaPosition","deltaTime","coeff","naturalDumpingPow","E","dumpedFCos","cos","dumpedFSin","sin","SpringAnimation","easer","prevTime","animationLoop","_raf","Animations","activeAnimations","_start","isSpring","animation","stop","isPanRunning","some","ScrollWheel","_onWheel","deltaX","deltaY","wheelToZoom","deltaMode","clientX","clientY","addElementHTML","htmlData","isCustomSVG","svgData","out","join","size","outlineID","inner","UIElement","elementHTML","html","isButton","toLowerCase","title","ariaLabel","setAttribute","innerHTML","onInit","onClick","onclick","appendTo","topBar","applyFilters","initArrowButton","isNextButton","loop","disabled","arrowPrev","order","arrowNext","closeButton","zoomButton","loadingIndicator","indicatorElement","isVisible","delayTimeout","toggleIndicatorClass","setIndicatorVisibility","visible","updatePreloaderVisibility","isLoading","preloaderDelay","ui","counterIndicator","counterElement","innerText","indexIndicatorSep","setZoomedIn","isZoomedIn","UI","_lastUpdatedZoomLevel","init","isRegistered","uiElementsData","sort","a","b","items","uiElementData","registerElement","_onZoomPanUpdate","elementData","isClosing","currZoomLevelDiff","potentialZoomLevel","imageClickAction","getBoundsByElement","thumbAreaRect","getBoundingClientRect","left","top","getCroppedBoundsByElement","imageWidth","imageHeight","fillZoomLevel","offsetX","offsetY","innerRect","getThumbBounds","instance","thumbBounds","thumbnail","thumbSelector","matches","querySelector","thumbCropped","PhotoSwipeEvent","details","assign","Eventable","_listeners","_filters","addFilter","fn","priority","f1","f2","removeFilter","args","apply","off","Placeholder","imageSrc","decoding","alt","src","parentNode","Content","displayedImageWidth","displayedImageHeight","isAttached","state","removePlaceholder","keepPlaceholder","isLazy","reload","usePlaceholder","placeholderSrc","msrc","isImageContent","loadImage","imageElement","updateSrcsetSizes","srcset","onLoaded","onError","setSlide","displayError","isError","isInitialSizeUpdate","image","sizesWidth","dataset","largestUsedSize","parseInt","sizes","String","lazyLoad","errorMsgEl","errorMsg","supportsDecode","isDecoding","finally","appendImage","MIN_SLIDES_TO_CACHE","lazyLoadData","createContentFromData","zoomLevel","ceil","lazyLoadSlide","getItemData","ContentLoader","limit","preload","_cachedItems","loadSlideByIndex","getContentByIndex","addToCache","removeByIndex","indexToRemove","item","removedItem","find","PhotoSwipeBase","numItems","dataSource","_getGalleryDOMElements","gallery","dataSourceItem","_domElementToItemData","galleryElement","children","childSelector","linkEl","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","currentSrc","getAttribute","pswpCropped","cropped","MIN_OPACITY","Opener","isClosed","_prepareOpen","_thumbBounds","open","isOpening","_duration","hideAnimationDuration","maxWidthToAnimate","_applyStartProps","_croppedZoom","showAnimationDuration","showHideAnimationType","showHideOpacity","_initialThumbBounds","_placeholder","_useAnimation","_animateZoom","Boolean","_animateRootOpacity","_animateBgOpacity","_opacityElement","bg","opacity","_cropContainer1","_cropContainer2","overflow","_setClosedStateZoomPan","willChange","decoded","isDelaying","_initiate","setProperty","_animateToOpenState","_animateToClosedState","_onAnimationComplete","_animateTo","containerOnePanX","containerOnePanY","containerTwoPanX","containerTwoPanY","animProps","defaultOptions","bgClickAction","tapAction","PhotoSwipe","super","_prepareOptions","_prevViewportSize","keyboard","isDestroying","_createMainStructure","rootClasses","mainClass","scrollWheel","isNaN","updateSize","pageYOffset","_initialItemData","_handlePageResize","_updatePageScrollOffset","goTo","next","prev","listeners","refreshSlideContent","slideIndex","potentialHolderIndex","holder","hasMouse","matchMedia","test","userAgent","setScrollOffset","body"],"sourceRoot":""}